<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://maruthink.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://maruthink.github.io/" rel="alternate" type="text/html" /><updated>2020-09-09T09:17:23+00:00</updated><id>https://maruthink.github.io/feed.xml</id><title type="html">Maru</title><subtitle>Record what I learned, what I thought... everyday.
</subtitle><author><name>maruthink</name></author><entry><title type="html">[CI] Pipeline library - 將Jenkins工作轉換成pipeline的前置作業</title><link href="https://maruthink.github.io/2020/09/09/addPipelineLibrary.html" rel="alternate" type="text/html" title="[CI] Pipeline library - 將Jenkins工作轉換成pipeline的前置作業" /><published>2020-09-09T00:00:00+00:00</published><updated>2020-09-09T00:00:00+00:00</updated><id>https://maruthink.github.io/2020/09/09/addPipelineLibrary</id><content type="html" xml:base="https://maruthink.github.io/2020/09/09/addPipelineLibrary.html">&lt;p&gt;隨著CI項目增加&lt;br /&gt;
如果每個工作內容具有一定的規則&lt;br /&gt;
但在發生變動卻需要一個一個手動更改時&lt;br /&gt;
必會增加很多loading&lt;/p&gt;

&lt;p&gt;例如daily build的工作 &lt;br /&gt;
從clone code &amp;gt; build code &amp;gt; scan &amp;gt; test &amp;gt; send report&lt;br /&gt;
假若今天有需要更改建置參數&lt;br /&gt;
可能就需要一個一個點進工作去做更改&lt;br /&gt;
若只有一個平台那也就算了&lt;br /&gt;
如果今天有十個平台呢?&lt;/p&gt;

&lt;p&gt;為了避免發生以上情形 &lt;br /&gt;
也考量所有建置環境可以同步更新工具  &lt;br /&gt;
決定及早將工作全數轉換成pipeline&lt;/p&gt;

&lt;p&gt;Jenkins上有個功能是可以把原本工作轉換成pipeline的 &lt;br /&gt;
但我沒有使用&lt;br /&gt;
因為我打算連pipeline也都做好版本控管&lt;/p&gt;

&lt;p&gt;前置作業比較麻煩&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;制定manifest&quot;&gt;制定&lt;strong&gt;manifest&lt;/strong&gt;&lt;/h3&gt;
    &lt;p&gt;在裏頭設定這些工作會用到的repo&lt;/p&gt;

    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020090901.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;制定pipeline-library&quot;&gt;制定pipeline library&lt;/h3&gt;
    &lt;p&gt;網路上有很多pipeline library的範本了, 就不再提供&lt;br /&gt;
 遵照jenkinsPipeline的框架即可撰寫完成&lt;/p&gt;

    &lt;p&gt;pipeline library主要有以下兩個內容 :&lt;br /&gt;
 #### jenkin job : 執行此pipeline會建置的工作
 #### lib : 工作會需要用到的共同Library&lt;/p&gt;

    &lt;p&gt;以此圖為例, devJob資料夾中, 就是Jenkins上會進行的工作內容
 如果之後有其他的新工作, 就可以複製此資料夾去做修改&lt;br /&gt;
 而libs裡面主要就是撰寫這些工作會使用的共同函數&lt;br /&gt;
 例如: dowloadScrip(), sendReport()…etc&lt;/p&gt;

    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020090902.jpg&quot; /&gt;
 &lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;記得安裝-git-repo&quot;&gt;記得安裝 &lt;a href=&quot;https://github.com/esrlabs/git-repo&quot;&gt;git-repo&lt;/a&gt;&lt;/h3&gt;
    &lt;p&gt;(看到她跑起來有點感動, 中間一度忘記設定id_rsa private key, 
 code一直抓不下來, debug老半天)&lt;/p&gt;
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020090900.jpg&quot; /&gt;
 &lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;jenkins-job中的設定&quot;&gt;Jenkins job中的設定&lt;/h3&gt;
    &lt;p&gt;記得要指定在pipeline-library建立的工作資料夾(devJob)&lt;/p&gt;
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020090904.jpg&quot; /&gt;
 &lt;/figure&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後, 按下&lt;strong&gt;建置&lt;/strong&gt;, Jenkins的pipeline工作就建立完成啦&lt;br /&gt;
Checkout, Deploy這些stage就是在pipeline library中的內容&lt;/p&gt;
&lt;figure class=&quot;foto-legenda&quot;&gt;
    &lt;img src=&quot;/assets/2020/2020090903.jpg&quot; /&gt;
   &lt;/figure&gt;

&lt;p&gt;之後就可以開始好好撰寫pipeline中的工作內容囉&lt;/p&gt;</content><author><name>maruthink</name></author><category term="ci" /><category term="teams" /><category term="jenkins" /><summary type="html">隨著CI項目增加 如果每個工作內容具有一定的規則 但在發生變動卻需要一個一個手動更改時 必會增加很多loading</summary></entry><entry><title type="html">[CI]傳送建置結果至Teams</title><link href="https://maruthink.github.io/2020/08/12/jenkinsSendMsgToTeams.html" rel="alternate" type="text/html" title="[CI]傳送建置結果至Teams" /><published>2020-08-12T00:00:00+00:00</published><updated>2020-08-12T00:00:00+00:00</updated><id>https://maruthink.github.io/2020/08/12/jenkinsSendMsgToTeams</id><content type="html" xml:base="https://maruthink.github.io/2020/08/12/jenkinsSendMsgToTeams.html">&lt;p&gt;前不久使用了Teams, 發現Jenkins上也有好用的通知套件&lt;br /&gt;
可以將建置結果傳送到Teams的頻道&lt;/p&gt;

&lt;p&gt;之前也在SLACK採用接收Jenkins訊息通知的作法 &lt;br /&gt;
習慣後完全離不開了&lt;/p&gt;

&lt;p&gt;建置開始時, 發送訊息通知&lt;br /&gt;
結束後用EMAIL寄出報告&lt;br /&gt;
這樣就不需要為了接收通知收取一大堆EMAIL&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先到Jenkins的套件管理安裝 &lt;a href=&quot;https://plugins.jenkins.io/Office-365-Connector/&quot;&gt;&lt;strong&gt;Office365 Connector&lt;/strong&gt;&lt;/a&gt;
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020081300.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;接著開啟Teams軟體, 可建立一個CICD專用頻道接收通知&lt;br /&gt;
  建立完之後, 點選頻道右邊的選項 &amp;gt; 選擇 &lt;strong&gt;連接器&lt;/strong&gt;
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020081301.jpg&quot; width=&quot;50&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;選擇 &lt;strong&gt;傳入 Webhook&lt;/strong&gt; &amp;gt; 點選 &lt;strong&gt;設定&lt;/strong&gt;
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020081302.jpg&quot; width=&quot;50&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;輸入要在頻道顯示的名稱 &amp;gt; 需要的話可上傳圖像(例如我是使用Jenkins爺爺的圖)&lt;br /&gt;
  設定好後, 選擇建立 &amp;gt; 複製連結
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020081303.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;打開想要寄出通知的工作, 會看到出現 &lt;strong&gt;Office 365 Connector&lt;/strong&gt; 的設定&lt;br /&gt;
  點選 &lt;strong&gt;Add webhook&lt;/strong&gt; &amp;gt; 輸入剛才複製的連結, 以及顯示名稱
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020081304.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;記得勾選想要發送通知的狀態
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020081305.jpg&quot; width=&quot;70&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;建置後, 就可以在頻道中看到結果啦
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020081306.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>maruthink</name></author><category term="ci" /><category term="teams" /><category term="jenkins" /><summary type="html">前不久使用了Teams, 發現Jenkins上也有好用的通知套件 可以將建置結果傳送到Teams的頻道</summary></entry><entry><title type="html">Git Tag 和 Branch name重複了</title><link href="https://maruthink.github.io/2020/08/04/gitTagAndBranch.html" rel="alternate" type="text/html" title="Git Tag 和 Branch name重複了" /><published>2020-08-04T00:00:00+00:00</published><updated>2020-08-04T00:00:00+00:00</updated><id>https://maruthink.github.io/2020/08/04/gitTagAndBranch</id><content type="html" xml:base="https://maruthink.github.io/2020/08/04/gitTagAndBranch.html">&lt;p&gt;設定GitLab 同步mirror時&lt;br /&gt;
一直發生如下錯誤&lt;/p&gt;
&lt;figure class=&quot;foto-legenda&quot;&gt;
	&lt;img src=&quot;/assets/2020/2020080400.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;查詢才發現: 原來git tag 和branch名稱相同時會有此問題&lt;br /&gt;
在執行git push origin $branchName時就會發生錯誤&lt;br /&gt;
最快的解決方式應該是branch更名了&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先保存要更名的分支內容&lt;br /&gt;
  &amp;gt; git checkout -b $new_branch_name origin/$branch_name&lt;/li&gt;
  &lt;li&gt;刪除遠端分支&lt;/li&gt;
  &lt;li&gt;push新的分支&lt;br /&gt;
  &amp;gt; git push $new_branch_name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;執行後, 所有內容都mirror過去啦!&lt;/p&gt;</content><author><name>maruthink</name></author><category term="git" /><category term="study" /><category term="gitlab" /><category term="mirror" /><summary type="html">設定GitLab 同步mirror時 一直發生如下錯誤</summary></entry><entry><title type="html">在OpenBMC中抽換GUI包</title><link href="https://maruthink.github.io/2020/08/04/replaceAngularJSWithVueJS.html" rel="alternate" type="text/html" title="在OpenBMC中抽換GUI包" /><published>2020-08-04T00:00:00+00:00</published><updated>2020-08-04T00:00:00+00:00</updated><id>https://maruthink.github.io/2020/08/04/replaceAngularJSWithVueJS</id><content type="html" xml:base="https://maruthink.github.io/2020/08/04/replaceAngularJSWithVueJS.html">&lt;p&gt;OpenBMC專案是Linux foudation和一些企業針對BMC(Baseboard Management Controllers)合作的開源專案&lt;br /&gt;
由於編譯後可以使用QEMU運行&lt;br /&gt;
如果要貢獻WEB專案, 這點還挺方便的&lt;/p&gt;

&lt;p&gt;原本的WEB部分係採用&lt;a href=&quot;https://github.com/openbmc/docs/blob/master/development/web-ui.md&quot;&gt;AngularJS框架開發的專案&lt;/a&gt;  &lt;br /&gt;
據官網指出明年六月後, 建議改為採用VueJS框架開發&lt;br /&gt;
&lt;a href=&quot;https://github.com/openbmc/phosphor-webui/blob/master/README.md&quot;&gt;詳見此說明&lt;/a&gt;&lt;br /&gt;
(反正都是WEB新手, 現在直接學習VueJS好像幸福點 XDD)&lt;/p&gt;

&lt;p&gt;OpenBMC專案的編譯方式採用Yocto以及bitbake進行設定及編譯 &lt;br /&gt;
因此抽換此WEB包需要編寫*.bb檔案&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;至WEBGUI編譯路徑, 複製原有的bb file修改  &lt;br /&gt;
  &amp;gt; cd  ./meta-phosphor/recipes-phosphor/webui/&lt;br /&gt;
  &amp;gt; cp phosphor-webui_git.bb webui-vue_git.bb&lt;/li&gt;
  &lt;li&gt;修改git repo, 以及commit ID
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020080401.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;指定要編譯的webui&lt;br /&gt;
在meta-XXXX路徑下, 找到要編譯的*.bbappend檔案  &lt;br /&gt;
將 phosphor-webui 改為 &lt;strong&gt;webui-vue&lt;/strong&gt;
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020080402.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;編譯過程中, 可能會遇到工具版本需要更新的情況, &lt;br /&gt;
例如nodejs, 這些都要更新到專案包中的bin folder下&lt;br /&gt;
完成後, 開啟QEMU就可以看到新介面啦~~
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020080403.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;原本的介面是這樣
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020080404.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>maruthink</name></author><category term="openbmc" /><category term="web" /><category term="yocto" /><category term="bitbake" /><category term="vuejs" /><category term="angularjs" /><summary type="html">OpenBMC專案是Linux foudation和一些企業針對BMC(Baseboard Management Controllers)合作的開源專案 由於編譯後可以使用QEMU運行 如果要貢獻WEB專案, 這點還挺方便的</summary></entry><entry><title type="html">K8S練習-00</title><link href="https://maruthink.github.io/2020/07/29/DevOpsK8S.html" rel="alternate" type="text/html" title="K8S練習-00" /><published>2020-07-29T00:00:00+00:00</published><updated>2020-07-29T00:00:00+00:00</updated><id>https://maruthink.github.io/2020/07/29/DevOpsK8S</id><content type="html" xml:base="https://maruthink.github.io/2020/07/29/DevOpsK8S.html">&lt;p&gt;專案越OWN越多, JENKINS上的工作越長越多&lt;br /&gt;
需要更有效率的管理方式&lt;br /&gt;
趁這次正好練習一下 kubernetes&lt;/p&gt;

&lt;p&gt;在使用kubernetes之前, 最好也熟悉docker&lt;br /&gt;
包含指令的使用以及建立docker image&lt;/p&gt;
&lt;h3 id=&quot;-建立docker-image&quot;&gt;* &lt;a href=&quot;https://blog.gtwang.org/virtualization/docker-basic-tutorial/2/&quot;&gt;建立Docker image&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;-kubernetesru-基礎介紹&quot;&gt;* &lt;a href=&quot;https://www.inwinstack.com/2018/05/08/what-is-kubernetes-part2/&quot;&gt;Kubernetesru 基礎介紹&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;-kubernetesru-kubernetes-基礎教學二實作範例podservicedeploymentingress&quot;&gt;* &lt;a href=&quot;https://medium.com/@C.W.Hu/kubernetes-implement-ingress-deployment-tutorial-7431c5f96c3e&quot;&gt;Kubernetesru Kubernetes 基礎教學（二）實作範例：Pod、Service、Deployment、Ingress&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;跟著上面的範例一步步&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;安裝環境&lt;/li&gt;
  &lt;li&gt;建立Docker image&lt;/li&gt;
  &lt;li&gt;啟動Minikube&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;foto-legenda&quot;&gt;
	&lt;img src=&quot;/assets/2020/2020072900.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;建立k8s pod&lt;/li&gt;
  &lt;li&gt;可以在&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10195385&quot;&gt;minikube dashboard&lt;/a&gt;看到Pod狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;foto-legenda&quot;&gt;
	&lt;img src=&quot;/assets/2020/2020072901.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;發現怎麼Pod有點狀況, 可以在dashboard看到fail log,&lt;br /&gt;
才知道是我的image name 設錯了
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020072902.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;改正後, 小鯨魚出現了, 開心
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020072903.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;Deployment : 複製多個相同的Pod
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;了解了 Service 後，接下來要來暸解第二個進階元件：Deployment。今天當我們同時要把一個 Pod 做橫向擴展，也就是複製多個相同的 Pod 在 Cluster 中同時提供服務，並監控如果有 Pod 當機我們就要重新把它啟動時，如果我們要一個 Pod 一個 Pod 透過指令建立並監控是很花時間的。因此，我們可以透過 Deployment 這個特殊元件幫我們達成上述的要求。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;編寫deployment.yaml後, 成功複製出Pod&lt;/li&gt;
    &lt;/ul&gt;
    &lt;figure class=&quot;foto-legenda&quot;&gt;
  &lt;img src=&quot;/assets/2020/2020072904.jpg&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;下次練習 : Ingress (一群Pod要如何被連線及存取)&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>maruthink</name></author><category term="devops" /><category term="study" /><summary type="html">專案越OWN越多, JENKINS上的工作越長越多 需要更有效率的管理方式 趁這次正好練習一下 kubernetes</summary></entry><entry><title type="html">Google的Python認證</title><link href="https://maruthink.github.io/2020/06/28/pythonCertificateOfGoogle.html" rel="alternate" type="text/html" title="Google的Python認證" /><published>2020-06-28T00:00:00+00:00</published><updated>2020-06-28T00:00:00+00:00</updated><id>https://maruthink.github.io/2020/06/28/pythonCertificateOfGoogle</id><content type="html" xml:base="https://maruthink.github.io/2020/06/28/pythonCertificateOfGoogle.html">&lt;figure class=&quot;foto-legenda&quot;&gt;
	&lt;img src=&quot;/assets/2020/2020062800.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;前不久開始有個習慣, 會把一些程式, 資訊影片…等當背景音聽&lt;br /&gt;
畢竟公司內不只華人&lt;br /&gt;
舉凡專業上的溝通都有很高機率會使用英文&lt;br /&gt;
如果專業名詞發音錯誤, 除了覺得糗, 還會給人不專業的感覺&lt;/p&gt;

&lt;p&gt;但是覺得既然都花時間”聽影片”了, 同時是不是可以得到點什麼?&lt;br /&gt;
當時Google正好和Coursera合作推出Python認證課程&lt;br /&gt;
工作上使用Python也一段時間了&lt;br /&gt;
所以抱著順手拿證照的心態啟動這個學習&lt;/p&gt;

&lt;p&gt;Google針對這張 Python證照規劃了一系列的學習內容&lt;br /&gt;
總共有六門課程(這六門也分別是六張小證照)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crash Course on Python&lt;/li&gt;
  &lt;li&gt;Using Python to Interact with the Operating System&lt;/li&gt;
  &lt;li&gt;Introduction to Git and GitHub&lt;/li&gt;
  &lt;li&gt;Troubleshooting and Debugging Techniques&lt;/li&gt;
  &lt;li&gt;Configuration Management and the Cloud&lt;/li&gt;
  &lt;li&gt;Automating Real-World Tasks with Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每個課程的學習時間預設是一個月 &lt;br /&gt;
學習順序可以自己決定  &lt;br /&gt;
每完成一個課程(考題認證), 便能繼續下一個課程&lt;br /&gt;
但必須完成前五個課程, 才能開啟最後一門課&lt;/p&gt;

&lt;p&gt;課程皆以真人錄製影片講解&lt;br /&gt;
每個小影片講解一個觀念&lt;br /&gt;
例如: dict的用法, awk指令的用法…等&lt;br /&gt;
只要對於觀念有任何不了解, 都可以重複播放影片&lt;br /&gt;
或者查閱教學提供的參考內容&lt;/p&gt;

&lt;p&gt;課程中不會用到的什麼高深或讓初學者困惑的程式技巧&lt;br /&gt;
舉凡了解dict, list這些資料結構便能完成練習題  &lt;br /&gt;
只要確保了解影片內容, 跟著課程規劃的步調就能順利完成課程&lt;br /&gt;
除了內容規劃得不錯以外&lt;br /&gt;
Google還提供&lt;strong&gt;Qwiklabs&lt;/strong&gt;環境&lt;br /&gt;
避免學習者花時間在設定環境上, 用來練習程式真的非常方便&lt;/p&gt;

&lt;p&gt;我接觸Python已有一年的時間&lt;br /&gt;
當初是以戰養戰的方式在學習Python&lt;br /&gt;
因此在觀看這些影片的過程中, 又重新建立觀念打好基礎&lt;/p&gt;

&lt;p&gt;這個認證的名稱是&lt;strong&gt;Python&lt;/strong&gt;&lt;br /&gt;
可能很多人一看到名稱變以為這個課程內容只跟Python有關(在聊千篇一律的無聊語法)&lt;br /&gt;
其實並非如此&lt;br /&gt;
舉凡Coding, 利用python腳本處理OS相關事務, 物件導向觀念, debug, 甚至Cloud也都有提到&lt;br /&gt;
當然Python的應用真的非常廣泛, 內容不勝枚舉&lt;br /&gt;
Google著實為初接觸PYTHON的學習者規劃了一套很不錯的學習地圖!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;都要忘記怎麼更新部落格了&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>maruthink</name></author><category term="study" /><summary type="html">前不久開始有個習慣, 會把一些程式, 資訊影片…等當背景音聽 畢竟公司內不只華人 舉凡專業上的溝通都有很高機率會使用英文 如果專業名詞發音錯誤, 除了覺得糗, 還會給人不專業的感覺 但是覺得既然都花時間”聽影片”了, 同時是不是可以得到點什麼? 當時Google正好和Coursera合作推出Python認證課程 工作上使用Python也一段時間了 所以抱著順手拿證照的心態啟動這個學習 Google針對這張 Python證照規劃了一系列的學習內容 總共有六門課程(這六門也分別是六張小證照) Crash Course on Python Using Python to Interact with the Operating System Introduction to Git and GitHub Troubleshooting and Debugging Techniques Configuration Management and the Cloud Automating Real-World Tasks with Python 每個課程的學習時間預設是一個月 學習順序可以自己決定 每完成一個課程(考題認證), 便能繼續下一個課程 但必須完成前五個課程, 才能開啟最後一門課 課程皆以真人錄製影片講解 每個小影片講解一個觀念 例如: dict的用法, awk指令的用法…等 只要對於觀念有任何不了解, 都可以重複播放影片 或者查閱教學提供的參考內容 課程中不會用到的什麼高深或讓初學者困惑的程式技巧 舉凡了解dict, list這些資料結構便能完成練習題 只要確保了解影片內容, 跟著課程規劃的步調就能順利完成課程 除了內容規劃得不錯以外 Google還提供Qwiklabs環境 避免學習者花時間在設定環境上, 用來練習程式真的非常方便 我接觸Python已有一年的時間 當初是以戰養戰的方式在學習Python 因此在觀看這些影片的過程中, 又重新建立觀念打好基礎 這個認證的名稱是Python 可能很多人一看到名稱變以為這個課程內容只跟Python有關(在聊千篇一律的無聊語法) 其實並非如此 舉凡Coding, 利用python腳本處理OS相關事務, 物件導向觀念, debug, 甚至Cloud也都有提到 當然Python的應用真的非常廣泛, 內容不勝枚舉 Google著實為初接觸PYTHON的學習者規劃了一套很不錯的學習地圖!</summary></entry><entry><title type="html">My First Post</title><link href="https://maruthink.github.io/2020/02/14/firstPost.html" rel="alternate" type="text/html" title="My First Post" /><published>2020-02-14T00:00:00+00:00</published><updated>2020-02-14T00:00:00+00:00</updated><id>https://maruthink.github.io/2020/02/14/firstPost</id><content type="html" xml:base="https://maruthink.github.io/2020/02/14/firstPost.html">&lt;p&gt;原本就打算今年要好好培養寫作習慣&lt;br /&gt;
在看了以下幾篇文章之後, 才決定要弄一個每日學習記錄空間&lt;br /&gt;
希望以此部落格來訓練思維&lt;/p&gt;

&lt;h3 id=&quot;刻意練習&quot;&gt;&lt;a href=&quot;http://teddy-chen-tw.blogspot.com/2016/04/blog-post_28.html&quot;&gt;刻意練習&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;每一篇心得都有價值&quot;&gt;&lt;a href=&quot;https://medium.com/hulis-blog/why-blogging-ab77fd8c6ffa&quot;&gt;每一篇心得都有價值&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;我為什麼鼓勵工程師寫blog&quot;&gt;&lt;a href=&quot;https://dotblogs.com.tw/hatelove/2017/03/26/why-engineers-should-keep-blogging&quot;&gt;我為什麼鼓勵工程師寫blog&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;藉由這個空間來培養自己能以一個有系統, 有組織的方式來呈現內化後的知識的能力
(好拗口…)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;When people ask me for advice on blogging,  
I always respond with yet another form of the same advice:  
pick a schedule you can live with, and stick to it.   
Until you do that, none of the other advice I could give you will matter.   
I don't care if you suck at writing.   
I don't care if nobody reads your blog.   
I don't care if you have nothing interesting to say.   
If you can demonstrate a willingness to write,   
and a desire to keep continually improving your writing,   
you will eventually be successful.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>maruthink</name></author><category term="other" /><summary type="html">原本就打算今年要好好培養寫作習慣 在看了以下幾篇文章之後, 才決定要弄一個每日學習記錄空間 希望以此部落格來訓練思維</summary></entry></feed>