<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://maruthink.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://maruthink.github.io/" rel="alternate" type="text/html" /><updated>2020-02-15T15:50:14+00:00</updated><id>https://maruthink.github.io/feed.xml</id><title type="html">Maru</title><subtitle>Record what I learned, what I thought... everyday.
</subtitle><author><name>maruthink</name></author><entry><title type="html">Creating braingdx: orthogonal tilemaps</title><link href="https://maruthink.github.io/2019/07/08/creating-braingdx-orthogonal-tilemaps.html" rel="alternate" type="text/html" title="Creating braingdx: orthogonal tilemaps" /><published>2019-07-08T00:00:00+00:00</published><updated>2019-07-08T00:00:00+00:00</updated><id>https://maruthink.github.io/2019/07/08/creating-braingdx-orthogonal-tilemaps</id><content type="html" xml:base="https://maruthink.github.io/2019/07/08/creating-braingdx-orthogonal-tilemaps.html">&lt;p&gt;Welcome to my new blog series where I talk in more detail about a personal project of mine called &lt;a href=&quot;https://github.com/bitbrain/braingdx&quot;&gt;braingdx&lt;/a&gt;. It builds upon &lt;a href=&quot;https://libgdx.badlogicgames.com&quot;&gt;libgdx&lt;/a&gt; and extends it &lt;a href=&quot;https://github.com/bitbrain/braingdx#features&quot;&gt;with game engine features&lt;/a&gt; to avoid writing boilerplate-code.&lt;/p&gt;

&lt;p&gt;In this part I will present how the tiledmap integration works in &lt;strong&gt;braingdx&lt;/strong&gt; compared to &lt;strong&gt;libgdx&lt;/strong&gt; itself. As mentioned before, this framework uses &lt;strong&gt;libgdx&lt;/strong&gt; and its APIs in order to integrate tiled maps.&lt;/p&gt;

&lt;h2 id=&quot;why-extending-already-existing-tiledmap-support&quot;&gt;Why extending already existing tiledmap support?&lt;/h2&gt;

&lt;p&gt;Before I started writing my own framework, I would use something like this to get tiledmaps drawn onto screen:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* somewhere in your create() method */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrthographicCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setToOrtho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;graphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gdx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;graphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tiledMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TmxMapLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orthogonal-map.tmx&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tiledMapRenderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrthogonalTiledMapRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tiledMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* somewhere in your render() method */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tiledMapRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tiledMapRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will render your multi-layered map onto the screen. Job is done then. Or  is it? Before I even started thinking about writing a tiledmap integration, I had to know the challenges ahead of me. I realised that using a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;OrthogonalTiledMapRenderer&lt;/code&gt; does not do the trick at all: the problem are game objects itself.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a game object is a stateful, dynamic object within a game world which represents anything the player can interact with: characters, items, events, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Given a multi-layered map like this in &lt;a href=&quot;https://www.mapeditor.org/&quot;&gt;Tiled&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbrain.itch.io/the-legend-of-studentenfutter&quot;&gt;&lt;img src=&quot;/public/media/legend-of-studentenfutter-screenshot.jpg&quot; alt=&quot;los-screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you note the bridge? How can I achieve that the player gets either rendered below the bridge (when walking beneath it) or is walking on the bridge? What about automatic collision detection? How can I prevent that the player is able to fall off the bridge, but can walk beneath it without problems? All these challenges can not be solved by using &lt;code class=&quot;highlighter-rouge&quot;&gt;OrthogonalTiledMapRenderer&lt;/code&gt;.
Instead, you have to write your own z-index ordering logic. Don’t worry though, these challenges have been solved within &lt;strong&gt;braingdx&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* within braingdx you simply have this */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GameContext2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;TiledMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAssetLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&quot;orthogonal-map.tmx&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;TiledMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Obtain the tiledmap manager from the game context&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;TiledMapManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tiledMapManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTiledMapManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;nc&quot;&gt;TiledMapContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tiledMapContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tiledMapManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// the map we want to load&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// passing the internal Camera object&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGameCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That’s all you need! In this blog series I am going to show you how I achieved that.&lt;/p&gt;

&lt;h2 id=&quot;how-braingdx-renders-stuff-onto-the-screen&quot;&gt;How braingdx renders stuff onto the screen&lt;/h2&gt;

&lt;p&gt;Before we get to the meat, let us talk a bit about how my framework actually displays stuff and why it does it that way. This is important to know so it becomes easier to integrate tiled maps directly into the framework:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/braingdx-render-pipeline.png&quot; alt=&quot;pipeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The framework renders different layers onto each other which result in the final frame:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, it renders the &lt;strong&gt;background&lt;/strong&gt; layer, this is mostly something like a parallax layer or a static background image.&lt;/li&gt;
  &lt;li&gt;Onto the background, we can now render the &lt;strong&gt;game world&lt;/strong&gt;. Simply put, the game world contains dynamic &lt;strong&gt;game objects&lt;/strong&gt; which can change attributes like position, shape, rotation etc. dynamically&lt;/li&gt;
  &lt;li&gt;The lighting is rendered onto all previous layers.&lt;/li&gt;
  &lt;li&gt;At last, we can now render the UI onto the screen&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since this order is static, where do we render our tiled map? Rendering it as part of the background layer does not allow us to render game objects behind particular layers. So, we have to render the tiledmap somehow as part of the game world.&lt;/p&gt;

&lt;h2 id=&quot;bringing-everything-together&quot;&gt;Bringing everything together&lt;/h2&gt;

&lt;p&gt;Initially, I never wanted to write my own framework. Reinventing the wheel should be avoided whenever possible. We can save a ton of time by just using what already exists. However, in case of tiled maps I could not find a single solution which satisfies my requirements.&lt;/p&gt;

&lt;p&gt;When creating this framework, I did not want to force new APIs onto the user - many parts are just re-using existing &lt;a href=&quot;https://libgdx.badlogicgames.com&quot;&gt;libgdx&lt;/a&gt; APIs. In case of tiled maps, I found a very simple solution to my problem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;braingdx&lt;/strong&gt; treats each tiledmap layer as an individual &lt;strong&gt;game object&lt;/strong&gt; and renders them as part of the &lt;strong&gt;world layer&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each &lt;strong&gt;game object&lt;/strong&gt; has its own z-index, which defines the order in which game objects are rendered. When drawing tiledmap layers as part of the gameworld render process, it allows us to have dynamic ordering. However, this begs a question:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What should be the z-index of a particular tiledmap layer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The formular looks as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zIndex = (layerIndex + 1) * rows - yIndex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;layerIndex&lt;/code&gt; is the number of the layer, counting from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; upwards. The &lt;code class=&quot;highlighter-rouge&quot;&gt;rows&lt;/code&gt; attribute is the number of total rows as part of the tiled map. Finally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;yIndex&lt;/code&gt; is the vertical index of the cell, the particular game object is currently on.&lt;/p&gt;

&lt;p&gt;As a concrete example, let’s imagine the following setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a &lt;code class=&quot;highlighter-rouge&quot;&gt;10x10&lt;/code&gt; orthogonal tiledmap with a tile resolution of &lt;code class=&quot;highlighter-rouge&quot;&gt;32x32&lt;/code&gt; pixels&lt;/li&gt;
  &lt;li&gt;the map consists of &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; tiled layers and a single object layer in between those&lt;/li&gt;
  &lt;li&gt;a player object is located on the object layer at position &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 60, y = 110&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;braingdx&lt;/strong&gt; will automatically compute the z-index according to the given properties.&lt;/p&gt;

&lt;p&gt;At first, the framework calculates the so called &lt;code class=&quot;highlighter-rouge&quot;&gt;yIndex&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yIndex = floor(110 / 32) = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So the game object is positioned at a &lt;code class=&quot;highlighter-rouge&quot;&gt;yIndex&lt;/code&gt; of &lt;strong&gt;3&lt;/strong&gt;. The framework does not have a concept of object layers, since each game object is rendered separately, depending on their position. Instead, &lt;strong&gt;braingdx&lt;/strong&gt; only keeps tiledmap layers. A game object is always translated onto the layer underneath. So, a tiledmap layer above the game object will always be rendered above the game object. As a result, the &lt;code class=&quot;highlighter-rouge&quot;&gt;layerIndex&lt;/code&gt; of the assigned tiledmap layer is &lt;strong&gt;0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This results to the following computation:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zIndex = (0 + 1) * 10 - 3 = 7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So the player at its current position will have a &lt;code class=&quot;highlighter-rouge&quot;&gt;zIndex&lt;/code&gt; of &lt;strong&gt;7&lt;/strong&gt;. This is all done by &lt;strong&gt;braingdx&lt;/strong&gt; internally. Since game objects are rendered in the order of their &lt;code class=&quot;highlighter-rouge&quot;&gt;zIndex&lt;/code&gt; attribute, it is ensured that game objects can be dynamically drawn before or after a particular tiledmap layer.&lt;/p&gt;

&lt;h2 id=&quot;what-about-tiledmap-layers-then&quot;&gt;What about tiledmap layers then?&lt;/h2&gt;

&lt;p&gt;We have learned how &lt;strong&gt;braingdx&lt;/strong&gt; computes &lt;code class=&quot;highlighter-rouge&quot;&gt;zIndex&lt;/code&gt; of game objects and that all game objects are drawn in the order of that index value. However, what about the layers itself? You might remember, that &lt;strong&gt;braingdx&lt;/strong&gt; treats an entire tiledmap layer as a single game object. This means that &lt;strong&gt;braingdx&lt;/strong&gt; does the following when loading tiled maps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;iterate over all layers of the tiledMap&lt;/li&gt;
  &lt;li&gt;in case of a object layer, add a new game object to the game world and assign all the properties such as dimensions, position, type etc. to the game object&lt;/li&gt;
  &lt;li&gt;in case of a tiledmap layer, add a new game object to the game at position &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 0, y = 0&lt;/code&gt; and set the game object to &lt;code class=&quot;highlighter-rouge&quot;&gt;active = false&lt;/code&gt;. This ensures that the layer itself is excluded from collision detection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since the framework separates the rendering of game objects, we have to define an own &lt;code class=&quot;highlighter-rouge&quot;&gt;GameObject2DRenderer&lt;/code&gt; for our tiledmap objects:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrthogonalMapLayerRenderer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameObject2DRenderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TiledMapTileLayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrthographicCamera&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TiledMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrthogonalTiledMapRenderer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nc&quot;&gt;OrthogonalMapLayerRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;TiledMapTileLayer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;TiledMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;OrthographicCamera&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Batch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// we dynamically create the renderer for performance/testing reasons&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrthogonalTiledMapRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;AnimatedTiledMapTile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateAnimationBaseTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;renderTileLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; method will be called whenever our tiledmap layer object gets drawn. Since we want to ensure that each layer has its own renderer, we have to generate the game object type for the tiledmap layer and register it to the &lt;strong&gt;RenderManager&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRenderManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A lot of time is wasted during gamejams sorting out render issues with tiledmaps. Modern game engines like &lt;strong&gt;Unity&lt;/strong&gt; or &lt;strong&gt;Unreal Engine&lt;/strong&gt; will do that for you - however for us Java folks there is not a simple way. Most of the time, we copy-paste together config from gamedev forums or Github, but we always had to re-invent the wheel each time. With &lt;strong&gt;braingdx&lt;/strong&gt; this changes everything!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bitbrain/braingdx&quot;&gt;Checkout braingdx&lt;/a&gt; and see for yourself: it can save you a lot of time when participating in gamejams!&lt;/p&gt;</content><author><name>maruthink</name></author><category term="braingdx" /><category term="libgdx" /><category term="java" /><category term="gamedev" /><category term="tiled" /><category term="tmx" /><summary type="html">Welcome to my new blog series where I talk in more detail about a personal project of mine called braingdx. It builds upon libgdx and extends it with game engine features to avoid writing boilerplate-code.</summary></entry><entry><title type="html">How I animated scape</title><link href="https://maruthink.github.io/2019/05/11/how-i-animated-scape.html" rel="alternate" type="text/html" title="How I animated scape" /><published>2019-05-11T00:00:00+00:00</published><updated>2019-05-11T00:00:00+00:00</updated><id>https://maruthink.github.io/2019/05/11/how-i-animated-scape</id><content type="html" xml:base="https://maruthink.github.io/2019/05/11/how-i-animated-scape.html">&lt;p&gt;In a &lt;a href=&quot;/2019/05/10/one-finger-to-rule-them-all.html&quot;&gt;previous blog post&lt;/a&gt; I talked about game design decisions I made in my most recent game project called &lt;a href=&quot;https://github.com/bitbrain/scape&quot;&gt;scape&lt;/a&gt;. You might notice that I have a particular animation style. At the current stage of development scape looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-animation-style.gif&quot; alt=&quot;scape-animation-style&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The game did not always look like that! I started creating initial mockups back in 2018. Back then all I knew was the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;since I binged &lt;a href=&quot;https://en.wikipedia.org/wiki/Mr._Robot&quot;&gt;Mr. Robot&lt;/a&gt; during that time I really wanted to craft a “hacker” themed game&lt;/li&gt;
  &lt;li&gt;I love the neon aspect of synthwave and cyberpunk - the game should have vibrant colours as well&lt;/li&gt;
  &lt;li&gt;you should be able to play the game like &lt;a href=&quot;https://apkpure.com/yoo-ninja-free/com.RunnerGames.game.YooNinja_Lite&quot;&gt;Yoo Ninja&lt;/a&gt; which is one of my favourite smartphone games ever created&lt;/li&gt;
  &lt;li&gt;I thought it’d be pretty cool to play as a little virus, infecting a computer system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After I thought about the initial design elements of the game I used Pyxel to create a first mockup. Keep in mind, this mockup is from 2018:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-initial-mockup-from-2018.jpg&quot; alt=&quot;scape-initial-mockup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right after creating this mockup &lt;a href=&quot;https://github.com/bitbrain/scape/commit/3fb3170379aec277f9dc39dc556f1b9e7cb61a51&quot;&gt;I pushed my first commit&lt;/a&gt; to Github. Within a couple of hours a prototype has been created with all game mechanics implemented: &lt;strong&gt;jumping&lt;/strong&gt; and &lt;strong&gt;flipping gravity&lt;/strong&gt;:&lt;/p&gt;

&lt;video autoplay=&quot;&quot; controls=&quot;&quot; loop=&quot;&quot; preload=&quot;auto&quot;&gt;
&lt;source src=&quot;https://video.twimg.com/tweet_video/Dk5G0cIWsAAK_Mu.mp4&quot; type=&quot;video/mp4&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;Next I am going to explain how I approached the player animation.&lt;/p&gt;

&lt;h1 id=&quot;animating-the-player&quot;&gt;Animating the player&lt;/h1&gt;

&lt;p&gt;The player is animated by using a 8x3 spritesheet with a sprite size of 8x8 pixel. All in all, spritesheets in scape are really tiny and I use a virtual camera ingame to zoom into the szene in order to magnify the pixel effect.&lt;/p&gt;

&lt;p&gt;This is how the spritesheet looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-animation-character-spritesheet.png&quot; alt=&quot;player-animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first row is used for basic movement animation. The second row is animating wall climbing. When the player is climbing a wall and moves just vertically, that animation is activated. Also, when a player is cornered or blocked, the third row is used as an animation.
The animation itself is looping in a so called &lt;a href=&quot;https://libgdx.badlogicgames.com/ci/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/Animation.PlayMode.html#LOOP_PINGPONG&quot;&gt;LOOP_PINGPONG&lt;/a&gt; fashion. All animation ingame is done by &lt;a href=&quot;https://libgdx.badlogicgames.com&quot;&gt;libgdx&lt;/a&gt;. When the player is jumping though, I am pausing the animation and resetting it to the initial index to achieve some kind of idle effect.&lt;/p&gt;

&lt;h1 id=&quot;level-animation&quot;&gt;Level animation&lt;/h1&gt;

&lt;p&gt;More complex to animate are the level animations themselves. Each frame is handdrawn by me within &lt;a href=&quot;https://pyxeledit.com&quot;&gt;Pyxel&lt;/a&gt;. This is really time-consuming but it is also fun to see a sprite coming “to live”.&lt;/p&gt;

&lt;p&gt;I have created several spritesheets, each of them has a particular style or purpose:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;vertical spritesheet&lt;/strong&gt; contains sprites which are vertically aligned. Animation frames are created from left to right of the spritesheet&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;horizontal spritesheet&lt;/strong&gt; contains sprites which are horizontally aligned. Animation frames are created from top to bottom of the spritesheet&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;block spritesheet&lt;/strong&gt; contains square sprites. Animation frames are created from left to right of the spritesheet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a while I realised that it probably was a mistake creating horizontal spritesheets at all. The simple reason is extendability. In order to build my levels I use the famous &lt;a href=&quot;https://www.mapeditor.org&quot;&gt;Tiled Editor&lt;/a&gt;. In there you can import spritesheets and define animations. Unfortunately, Tiled is counting sprite indices from left to right, row by row. When I want to add more animations to my spritesheet, I have to increase the image size of it, which has an impact on all indices since Tiled requires to recompute those. That can lead to visual glitches and it is not clear what Tiled is doing behind the scenes. Be careful animating sprites vertically!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Within spritesheets, always animate frames from left to right and grow your spritesheet vertically in order to avoid glitches in editors such as Tiled!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Within a spritesheet itself an animation is structured as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-animation-vertical-tileset.png&quot; alt=&quot;spritesheet-animation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to achieve an affect of energy lines cycling through the wires, I carefully picked a pattern with decreasing colour vibrancy which travels through the tile itself. This is how the tile looks animated in Tiled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-animation-tile-animation.gif&quot; alt=&quot;spritesheet-animation-animated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I simply have to create hundreds of these handdrawn animations, sounds simple, doesn’t it? Well, I realised after a while that it breaks the immersion when the animations are not in sync. This made things far more complicated since it means that I not only have to animate each tile but also I have to consider sibling tiles to fluidly integrate with eachother.&lt;/p&gt;

&lt;h1 id=&quot;animating-bytes&quot;&gt;Animating bytes&lt;/h1&gt;

&lt;p&gt;When playing scape, the player has to collect so called &lt;strong&gt;bytes&lt;/strong&gt;. Animating those bytes was much simpler than taking care of individual level tiles:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-animation-byte-spritesheet.png&quot; alt=&quot;byte-spritesheet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In-game I then used &lt;a href=&quot;https://github.com/AurelienRibon/universal-tween-engine&quot;&gt;Universal Tween Engine&lt;/a&gt; to animate slight scaling. To improve visual fidelity I also added particle effects which I had created by using &lt;a href=&quot;https://github.com/libgdx/libgdx/wiki/2D-Particle-Editor&quot;&gt;the 2D particle editor of libgdx&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/particle2d-editor.gif&quot; alt=&quot;particle-editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Within my game code I then rendered these particle effects over the animated and scaled sprites. Later on I also implemented lighting to my game. At that point, I purposfully attached pink lights onto the byte objects so they are visible from the far!&lt;/p&gt;

&lt;p&gt;I really enjoy doing manual animation since you have more control over each individual pixel on the screen! The game will release later this year. In the meantime you can already download a pre-release version. Feel free to give me feedback either here or on &lt;a href=&quot;https://twitter.com/bitbrain_&quot;&gt;twitter&lt;/a&gt;! If you are especially interested in further development on this project, make sure to &lt;a href=&quot;https://twitter.com/i/moments/1127137651549667328&quot;&gt;checkout this Moment page&lt;/a&gt; I created.&lt;/p&gt;

&lt;iframe src=&quot;https://itch.io/embed/357509?bg_color=15171A&amp;amp;fg_color=05fecf&amp;amp;link_color=f20179&amp;amp;border_color=15171A&quot; width=&quot;100%&quot; height=&quot;167&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</content><author><name>maruthink</name></author><category term="gamedev" /><category term="devlog" /><category term="scape" /><category term="pixelart" /><category term="pyxel" /><category term="tiled" /><summary type="html">In a previous blog post I talked about game design decisions I made in my most recent game project called scape. You might notice that I have a particular animation style. At the current stage of development scape looks like this:</summary></entry><entry><title type="html">Game design: one finger to rule them all</title><link href="https://maruthink.github.io/2019/05/10/one-finger-to-rule-them-all.html" rel="alternate" type="text/html" title="Game design: one finger to rule them all" /><published>2019-05-10T00:00:00+00:00</published><updated>2019-05-10T00:00:00+00:00</updated><id>https://maruthink.github.io/2019/05/10/one-finger-to-rule-them-all</id><content type="html" xml:base="https://maruthink.github.io/2019/05/10/one-finger-to-rule-them-all.html">&lt;p&gt;Everyone owns a smartphone nowadays. People are swiping within their apps up and down, left and right, panning in and double tap  whenever they get the opportunity. What people definitely don’t want is having to use more than a single finger. When looking at popular apps like Instagram, Twitter or Boost, the entire UX flow is designed for single-hand use. Game developers such as &lt;a href=&quot;https://king.com&quot;&gt;King&lt;/a&gt; have taken that principle to another level for a simple reason: &lt;strong&gt;Accessibility&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you want your game to be played by the masses, it needs to be accessible. In order for a game to be accessible, it needs to be supported by the hardware and the user should not get confused how to actually play the game. Many mobile games have long and annoying tutorials, explaining the complex UI and input methods such as buttons and virtual HUDs. Personally, I always disliked the fact that controls are being emulated on smartphones via HUDs like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://icdn9.digitaltrends.com/image/fortnite-mobile-beginners-guide-gather-720x720.jpg&quot; alt=&quot;fortnite-hud&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Especially on a busy train or a cigarette in one hand, playing those kind of games can be quite tricky. Why don’t all mobile games just have simple &lt;strong&gt;One Finger to Rule them All&lt;/strong&gt; controls?&lt;/p&gt;

&lt;h1 id=&quot;simple-controls-are-challenging&quot;&gt;Simple controls are challenging&lt;/h1&gt;

&lt;p&gt;There is a simple reason why so many games try to avoid simple input but instead use more complex input mechanisms: it can become rather complicated to communicate how the game can be played, when there is just a single input method! On the other hand, as a user I do not want to read through manuals or tutorials to learn how to actually play the game. Time is much better spent and there are so many games out there which do not require any tutorials whatsoever. Thus, designing a simple input system which can be just with just one finger is key. Before we can implement simple input, the following questions need to be answered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how does the player know if he should swipe, pan or where to click?&lt;/li&gt;
  &lt;li&gt;how do I prevent that the player accidentally uses wrong controls?&lt;/li&gt;
  &lt;li&gt;how can I ensure the player learns the controls naturally by just trying out?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answering these questions gave me confidence to build all my games with simple controls. This made designing UI components rather hard but eventually paid of by having a really simple game experience.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The more limited the controls are, the more accessible the game is. However, the amount of input combinations decreases with limited controls.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finding the perfect balance between those two is the real challenge.&lt;/p&gt;

&lt;h1 id=&quot;a-first-approach&quot;&gt;A first approach&lt;/h1&gt;

&lt;p&gt;Currently I am working on a small game called &lt;strong&gt;scape&lt;/strong&gt; - it is a fast-paced 2D platformer written in &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;Java&lt;/a&gt;, using my gamejam framework called &lt;a href=&quot;https://github.com/bitbrain/braingdx&quot;&gt;braingdx&lt;/a&gt;. You play a little virus infecting a compuer system. I got inspired by &lt;a href=&quot;https://yoo-ninja-free.en.uptodown.com/android&quot;&gt;Yoo Ninja!&lt;/a&gt;, one of my favourite Android games:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.utdstc.com/screen/13/yoo-ninja-free-1.jpg:l&quot; alt=&quot;yoo-ninja&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basically, the idea is to reach the end of the level without falling out of bounds. Touch the screen to jump (and effectively flip gravity). This is how my game &lt;strong&gt;scape&lt;/strong&gt; loks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-showcase.gif&quot; alt=&quot;scape-showcase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing the player does is touching the screen and one notices that the character will jump as a consequence. However, this has some impact on the initial game design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the player should not be punished for not touching the screen initially&lt;/li&gt;
  &lt;li&gt;the player should notice that he needs to do &lt;em&gt;something&lt;/em&gt; in order to progress&lt;/li&gt;
  &lt;li&gt;the player should also learn in the beginning what the consequences are if no action is taken&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To solve all these questions I did a simple trick: I placed a block in front of the player. As a result the player bumps into the block at some point, gets stuck and the moving camera will kill the player if out of bounds:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-tutorial-block.gif&quot; alt=&quot;scape-block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The player has no other choice than trying to touch the screen. Each level has been designed so the player automatically initiates actions to play the game, without having an explicit tutorial:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/scape-tutorial-block-skip.gif&quot; alt=&quot;scape-block-skip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a game designer, this is not obvious at first. Only after a couple of iterations I can eventually refine the level structure to ensure the best possible game experience.&lt;/p&gt;

&lt;h1 id=&quot;the-dark-side-of-the-moon&quot;&gt;The dark side of the moon&lt;/h1&gt;

&lt;p&gt;Having a character jump via touch is not the most difficult mechanic. The &lt;strong&gt;One Touch Mechanic&lt;/strong&gt; made things especially more tricky when it came to menu flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how do I communicate to the player that he has to swipe in order to switch to the next level in the stage selection?&lt;/li&gt;
  &lt;li&gt;how does a player know he needs to touch the screen to enter a level?&lt;/li&gt;
  &lt;li&gt;how does a player know he requires to keep the screen touched to skip a cutscene?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those questions are just partially answered and I am currently about to rewrite the entire menu flow to improve on that drastically.&lt;/p&gt;

&lt;h1 id=&quot;into-the-future&quot;&gt;Into the Future&lt;/h1&gt;

&lt;p&gt;Currently I am refining the level design, updating assets and rewriting the level selection flow. In another blog article I am going to elaborate on that more detailed. Stay tuned!&lt;/p&gt;</content><author><name>maruthink</name></author><category term="gamedev" /><category term="devlog" /><category term="scape" /><category term="gamedesign" /><summary type="html">Everyone owns a smartphone nowadays. People are swiping within their apps up and down, left and right, panning in and double tap whenever they get the opportunity. What people definitely don’t want is having to use more than a single finger. When looking at popular apps like Instagram, Twitter or Boost, the entire UX flow is designed for single-hand use. Game developers such as King have taken that principle to another level for a simple reason: Accessibility.</summary></entry><entry><title type="html">How to automatically publish your game to itch.io</title><link href="https://maruthink.github.io/2019/02/18/automatically-publish-games-to-itchio.html" rel="alternate" type="text/html" title="How to automatically publish your game to itch.io" /><published>2019-02-18T00:00:00+00:00</published><updated>2019-02-18T00:00:00+00:00</updated><id>https://maruthink.github.io/2019/02/18/automatically-publish-games-to-itchio</id><content type="html" xml:base="https://maruthink.github.io/2019/02/18/automatically-publish-games-to-itchio.html">&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;why should I even upload my games automatically?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a good question. Simple answer is, that during a gamejam you can fully concentrate on building your game. Especially, when the deadline is coming closer, you simply have to commit and push your changes, in order to trigger an automatic deployment of your game to itch.io:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;make a code or asset change change locally&lt;/li&gt;
  &lt;li&gt;commit your change via Git and push it to Github&lt;/li&gt;
  &lt;li&gt;TravisCI automatically picks up your change and builds your game&lt;/li&gt;
  &lt;li&gt;TravisCI automatically pushes the new build to itch.io&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This tutorial shows you how to do that!&lt;/p&gt;

&lt;h1 id=&quot;prequisites&quot;&gt;Prequisites&lt;/h1&gt;

&lt;p&gt;For this tutorial, we use the following technologies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; to version control our game code&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org&quot;&gt;TravisCI&lt;/a&gt; as a build agent to build our game&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itch.io&quot;&gt;itch.io&lt;/a&gt; to host our game&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itch.io/docs/butler/pushing.html&quot;&gt;Butler&lt;/a&gt; to upload our game builds to itch.io&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;setup-github-repository&quot;&gt;Setup Github repository&lt;/h1&gt;

&lt;p&gt;If not already done, create a Github repository to host our source code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/create-new-github-repo.png&quot; alt=&quot;create-new-github-repo&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;setup-itchio&quot;&gt;Setup itch.io&lt;/h1&gt;

&lt;p&gt;Before we can start uploading our first game, we need to create an itch.io game project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/create-new-game-project.png&quot; alt=&quot;create-new-game-project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After your project is created, head over to your account settings to generate a new API key. This key is required so other services such as TravisCI are able to communicate with itch.io.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/create-new-api-key.png&quot; alt=&quot;create-new-api-key&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prepare-travisci-deployment&quot;&gt;Prepare TravisCI deployment&lt;/h1&gt;

&lt;p&gt;Once the repository exists and itch.io is prepared, we need to prepare TravisCI. This consists of the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;create deployment script&lt;/li&gt;
  &lt;li&gt;commit and push travis.yml&lt;/li&gt;
  &lt;li&gt;prepare TravisCI project&lt;/li&gt;
  &lt;li&gt;setup &lt;code class=&quot;highlighter-rouge&quot;&gt;BUTLER_API_KEY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;create-deployment-script&quot;&gt;Create deployment script&lt;/h1&gt;

&lt;p&gt;This script will take your artifacts and push it to itch.io. Create a new file, called &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; pipefail

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUTLER_API_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unable to deploy! No BUTLER_API_KEY environment variable specified!&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;prepare_butler&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Preparing butler...&quot;&lt;/span&gt;
    download_if_not_exist http://dl.itch.ovh/butler/linux-amd64/head/butler butler
    &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x butler
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

prepare_and_push&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Push &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; build to itch.io...&quot;&lt;/span&gt;
    ./butler push &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

download_if_not_exist&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bitbrain/mygame&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;artifact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mygame.jar&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;windows-linux-mac&quot;&lt;/span&gt;

prepare_butler

prepare_and_push &lt;span class=&quot;nv&quot;&gt;$project&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$artifact&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$platform&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Done.&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This script first checks, if the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;BUTLER_API_KEY&lt;/code&gt; is defined. This variable can be setup within Travis and is required for itch.io to authenticate your game upload.
Afterwards we define a bunch of helper functions. Then we download the latest version of &lt;strong&gt;butler&lt;/strong&gt; and upload the game with it. Please ensure to configure the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;setup-travisyml&quot;&gt;Setup .travis.yml&lt;/h1&gt;

&lt;p&gt;This file is required by TravisCI to understand how to build your game. For example, you can setup a Java environment (for Java games) or Objective-C environment (for Unity games). TravisCI ensures that this environment is set up and it will build your game:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openjdk8&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The BuildTools version used by your project&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build-tools-26.0.2&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The SDK version used to compile your project&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;android-26&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;echo &quot;this is my game&quot; &amp;gt; mygame.jar&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;after_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;chmod +x deploy.sh &amp;amp;&amp;amp; ./deploy.sh&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Feel free to create a different .yml for Java, C++ or even Android! Read more about that &lt;a href=&quot;https://docs.travis-ci.com/user/reference/overview/&quot;&gt;in the official docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;prepare-travisci-project&quot;&gt;Prepare TravisCI project&lt;/h1&gt;

&lt;p&gt;Now we have to configure our TravisCI project. Head over to https://travis-ci.org, authenticate with your Github account and you should be able to import your Github project from there. Once imported, head over to the settings to configure environment variables:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/travis-ci-head-to-settings.png&quot; alt=&quot;travis-ci-head-to-settings&quot; /&gt;
&lt;img src=&quot;/public/media/travis-ci-add-butler-api-key.png&quot; alt=&quot;travis-ci-add-butler-api-key&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;run-the-build&quot;&gt;Run the build&lt;/h1&gt;

&lt;p&gt;Congratulations! You successfully set up the pipeline. Let’s run the build to see how your game automatically publishes:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Preparing butler...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 19.6M  100 19.6M    0     0  31.6M      0 --:--:-- --:--:-- --:--:-- 31.6M
Push windows-linux-mac build to itch.io...
• For channel `windows-linux-mac`: pushing first build
• Pushing 16 B (1 files, 0 dirs, 0 symlinks)
✓ Added 16 B fresh data
✓ 86 B patch (no savings)
• Build is now processing, should be up in a bit.
Use the `butler status bitbrain/mygame:windows-linux-mac` for more information.
Done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Your latest game version is now available on itch.io:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/itch-io-my-game-upload.png&quot; alt=&quot;itch-io-my-game-upload&quot; /&gt;&lt;/p&gt;</content><author><name>maruthink</name></author><category term="itchio" /><category term="deployment" /><category term="travisci" /><category term="gamedev" /><summary type="html">Motivation</summary></entry><entry><title type="html">Continuous Delivery with Travis and Github</title><link href="https://maruthink.github.io/2018/07/15/cd-with-travis.html" rel="alternate" type="text/html" title="Continuous Delivery with Travis and Github" /><published>2018-07-15T00:00:00+00:00</published><updated>2018-07-15T00:00:00+00:00</updated><id>https://maruthink.github.io/2018/07/15/cd-with-travis</id><content type="html" xml:base="https://maruthink.github.io/2018/07/15/cd-with-travis.html">&lt;p&gt;Some years ago I started working on a project called &lt;a href=&quot;https://github.com/bitbrain/braingdx&quot;&gt;braingdx&lt;/a&gt;. It is a gamejam framework based on &lt;a href=&quot;https://libgdx.badlogicgames.com/&quot;&gt;libgdx&lt;/a&gt;, fully written in &lt;strong&gt;Java&lt;/strong&gt;. At some point I decided to make the artifact available for a broader audience. As a result I required a deployment flow to automatically upload the &lt;strong&gt;.jar&lt;/strong&gt; files to an artifactory of my choice.&lt;/p&gt;

&lt;h1 id=&quot;the-silly-approach&quot;&gt;The silly approach&lt;/h1&gt;

&lt;p&gt;I just wanted to publish artifacts, but not on each commit. Instead, I decided to go for a multi-&lt;a href=&quot;https://git-scm.com/docs/git-branch&quot;&gt;branch&lt;/a&gt; configuration like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/silly-git-flow.svg&quot; alt=&quot;silly-git-flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have a &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch where we commit on. When we decide to release an artifact, we manually (locally) merge into &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt;, push the changes and &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; will pickup the build, thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file configured:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;java&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openjdk7&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$HOME/.m2&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;COMMIT=${TRAVIS_COMMIT::8}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;export CH_VERSION=$(docker run -v $(pwd):/chime bitbrain/chime:latest CHANGELOG.md version)&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;export CH_TEXT=$(docker run -v $(pwd):/chime bitbrain/chime:latest CHANGELOG.md text)&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mvn versions:set -DnewVersion=$CH_VERSION&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x deployment/deploy.sh&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./deployment/deploy.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The configuration file has a &lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt; section. In there we use a tool written by me called &lt;a href=&quot;https://github.com/bitbrain/chime&quot;&gt;chime&lt;/a&gt;. We run this tool as a Docker container to extract version and changelog information from a &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt; provided. For example, we have a file like this:&lt;/p&gt;
&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Version 1.1&lt;/span&gt;

This is version 1.1 description.
&lt;span class=&quot;p&quot;&gt;
*&lt;/span&gt; some patchnotes
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; more patchnotes

&lt;span class=&quot;gh&quot;&gt;# Version 1.0&lt;/span&gt;

This is version 1.0 description.
&lt;span class=&quot;p&quot;&gt;
*&lt;/span&gt; some patchnotes
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; more patchnotes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The resulting environment variables would look like this (after &lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt; execution):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt;
Version 1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CH_TEXT&lt;/span&gt;
This is version 1.0 description.&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; some patchnotes&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; more patchnotes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using this approach we can define versions within a &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt; file and it should automatically pick up the latest version from the file. We update the version of the library temporarily via &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn versions:set&lt;/code&gt; with the latest version extracted from the changelog file.&lt;/p&gt;

&lt;p&gt;Afterwards we run a &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; script during the &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; stage:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn deploy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-DskipTests&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--settings&lt;/span&gt; deployment/settings.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I configured a custom Nexus inside my &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.xml&lt;/code&gt; to push my artifacts to. Users of my library then would need to add the repository via repository statement in their configuration.&lt;/p&gt;

&lt;h1 id=&quot;silly-approach-lots-of-problems&quot;&gt;Silly approach, lots of problems&lt;/h1&gt;

&lt;p&gt;The approach worked fine, however it was not as refined as I hoped it to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;my custom Nexus caused SSL Certificate issues on some Windows and Mac machines when trying to download dependencies&lt;/li&gt;
  &lt;li&gt;it is truly cumbersome to manually switch between &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; locally and merge all the time&lt;/li&gt;
  &lt;li&gt;the current multi-branch approach causes lots of merge commits (if we are not able to fast-forward)&lt;/li&gt;
  &lt;li&gt;sometimes you would forget to switch from &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; back to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; locally and suddenly commiting on a wrong branch&lt;/li&gt;
  &lt;li&gt;not easy to have a mapping from version to commit history (missing &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging&quot;&gt;tagging&lt;/a&gt; functionality)&lt;/li&gt;
  &lt;li&gt;Travis only builds the &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; branch, not the master branch. We never truly compile each commit on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; nor run any tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After putting some thought into it I came up with a much better, more light-weighted approach.&lt;/p&gt;

&lt;h1 id=&quot;one-branch-to-rule-them-all&quot;&gt;One branch to rule them all&lt;/h1&gt;

&lt;p&gt;I eventually decided to get rid of the &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; branch after all. All commits should go to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; and should be tested and/or deployed on Travis. I would keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt; version extraction and do additional checks to avoid deploying already deployed versions twice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/simple-branch-flow.svg&quot; alt=&quot;simple-branch-flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new flow is executed whenever a new commit is pushed onto &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;checkout from SCM&lt;/li&gt;
  &lt;li&gt;extract version and changelog from &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sign artifacts - this is required in order to push artifacts to &lt;a href=&quot;https://search.maven.org/&quot;&gt;Maven Central&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install/Deployment
    &lt;ul&gt;
      &lt;li&gt;verify if the latest git tag is different than version extracted. Run deployment when extracted version from &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt; is newer&lt;/li&gt;
      &lt;li&gt;when there is no difference in version, the version had been deployed already. Instead, run unit tests and generate code coverage reports&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Upload additional artifacts
    &lt;ul&gt;
      &lt;li&gt;happens on &lt;strong&gt;after_install&lt;/strong&gt; stage&lt;/li&gt;
      &lt;li&gt;when the new version is different than the latest tag create a new &lt;a href=&quot;https://help.github.com/articles/creating-releases/&quot;&gt;Github Release&lt;/a&gt; which will automatically create a new tag with the current version&lt;/li&gt;
      &lt;li&gt;upload &lt;a href=&quot;http://bitbrain.github.io/braingdx/docs/latest/&quot;&gt;latest Javadoc&lt;/a&gt; to Github&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the rest of this article I will explain how some of these steps work in detail.&lt;/p&gt;

&lt;h1 id=&quot;sign-your-artifacts&quot;&gt;Sign your Artifacts&lt;/h1&gt;

&lt;p&gt;In order to upload your artifacts to Central you require to sign your artifacts with a GPG signature. I recommend &lt;a href=&quot;http://www.debonair.io/post/maven-cd/&quot;&gt;reading this tutorial&lt;/a&gt; to learn how to do that.&lt;/p&gt;

&lt;p&gt;In the tutorial the author explains that we want to encrypt our &lt;code class=&quot;highlighter-rouge&quot;&gt;codesigning.asc&lt;/code&gt; file to prevent strangers from stealing it. We do that by installing and using the &lt;strong&gt;travis&lt;/strong&gt; CLI:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;travis
travis login
travis encrypt-file codesigning.asc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When running this I discovered that Travis would fail the build:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bad decrypt
gpg: invalid radix64 character AE skipped
gpg: invalid radix64 character 13 skipped
gpg: invalid radix64 character F5 skipped
gpg: invalid radix64 character BE skipped
gpg: invalid radix64 character C5 skipped
gpg: invalid radix64 character AF skipped
gpg: invalid radix64 character C8 skipped
gpg: invalid radix64 character 14 skipped
gpg: invalid radix64 character 82 skipped
gpg: invalid radix64 character DF skipped
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What is going on?! I followed the tutorial step by step and for me it did not want to work. After hours of desperation and crying on the floor I found &lt;a href=&quot;https://github.com/travis-ci/travis-ci/issues/6936&quot;&gt;something on Github&lt;/a&gt;. Apparently, on my Windows 10 machine the &lt;code class=&quot;highlighter-rouge&quot;&gt;travis encrypt-file&lt;/code&gt; operation is broken and produces a corrupted encryption. WOW! Thanks for that. How did I fix it? A little bit of Docker 🐳 for the win. Let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ubuntu&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby ruby-dev gcc g++ make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;travis
&lt;span class=&quot;k&quot;&gt;VOLUME&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /test&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; codesigning.asc /test/codesigning.asc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; GITHUB_TOKEN=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bash&quot;, &quot;travis login --github-token $GITHUB_TOKEN &amp;amp;&amp;amp; travis-encrypt codesigning.asc &amp;amp;&amp;amp; echo codesigning.asc.enc&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And then:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Build our image&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; encrypt-asc &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Encrypt the file and produce it&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx encrypt-asc &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; codesigning.asc.enc
&lt;span class=&quot;c&quot;&gt;# Clean up the dirty mess!&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;encrypt-asc &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After committing the &lt;strong&gt;codesigning.asc.enc&lt;/strong&gt; file Travis was able to decrypt the GPG private key which is required to sign the artifacts.&lt;/p&gt;

&lt;h1 id=&quot;check-if-version-is-changed&quot;&gt;Check if version is changed&lt;/h1&gt;

&lt;p&gt;In order to check if the version has changed I did the following during the &lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt; stage:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LATEST_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git describe &lt;span class=&quot;nt&quot;&gt;--abbrev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After that we can deploy or just run the tests, depending of the version:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LATEST_TAG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Latest deployed version=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LATEST_TAG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; not equal new version=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;. Deploying...&quot;&lt;/span&gt;
mvn deploy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-Psign&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--settings&lt;/span&gt; deployment/settings.xml
&lt;span class=&quot;k&quot;&gt;else
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Skipping release! &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LATEST_TAG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; already released to Nexus! Running tests...&quot;&lt;/span&gt;
mvn clean &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;pushing-new-release-to-github&quot;&gt;Pushing new release to Github&lt;/h1&gt;

&lt;p&gt;In order to push the new release automatically to Github, we do the following on the &lt;code class=&quot;highlighter-rouge&quot;&gt;after_install&lt;/code&gt; stage:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;sirlancelbot@gmail.com&quot;&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;Sir Lancelbot&quot;&lt;/span&gt;
git clone &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;@github.com/bitbrain/braingdx

&lt;span class=&quot;c&quot;&gt;# Replacing line endings in body&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':a;N;$!ba;s/\r{0,1}\n/\\n/g'&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CH_TEXT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{&quot;tag_name&quot;:&quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;,&quot;target_commitish&quot;:&quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TRAVIS_BRANCH&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;,&quot;name&quot;:&quot;Version '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;,&quot;body&quot;:&quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;,&quot;draft&quot;:false,&quot;prerelease&quot;:false}'&lt;/span&gt;

curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; bitbrain:&lt;span class=&quot;nv&quot;&gt;$GITHUB_TOKEN&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$json&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://api.github.com/repos/bitbrain/braingdx/releases
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will ensure that a latest release has been pushed (including latest changelog content from &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt; and Github will automatically create a tag for us. Next time we run the pipeline, it won’t deploy again since the tag has been updated.&lt;/p&gt;

&lt;h1 id=&quot;uploading-javadoc-to-github-pages&quot;&gt;Uploading Javadoc to Github pages&lt;/h1&gt;

&lt;p&gt;Uploading Javadoc to Github pages is a little bit more tricky. I want to have the following requirements fullfilled:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each version is persisted in Github pages, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs/1.0.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the latest docs should be available via &lt;code class=&quot;highlighter-rouge&quot;&gt;/docs/latest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Create temporary directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/docs
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx
mvn versions:set &lt;span class=&quot;nt&quot;&gt;-DskipTests&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DnewVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mvn javadoc:javadoc &lt;span class=&quot;nt&quot;&gt;-DskipTests&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/docs
&lt;span class=&quot;c&quot;&gt;# Copy generated Javadocs into a temporary directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx/core/target/site/apidocs/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/docs

&lt;span class=&quot;c&quot;&gt;# Cleanup&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx

&lt;span class=&quot;c&quot;&gt;# Checkout Jekyll branch and create new folder with new version&lt;/span&gt;
git checkout gh-pages
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx/docs/&lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/docs/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx/docs/&lt;span class=&quot;nv&quot;&gt;$CH_VERSION&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy also into &quot;latest&quot; docs&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx/docs/latest
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx/docs/latest
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/docs/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/braingdx/docs/latest

&lt;span class=&quot;c&quot;&gt;# Add everything and push!&lt;/span&gt;
git add &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Travis build &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TRAVIS_BUILD_NUMBER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - update Javadoc&quot;&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;-fq&lt;/span&gt; origin gh-pages &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Successfully deployed Javadoc to /docs&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://bitbrain.github.io/braingdx/docs/latest/&quot;&gt;Click here&lt;/a&gt; to see an example of the generated page created.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The new flow allows me to have:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;single branch&lt;/li&gt;
  &lt;li&gt;every commit is tested in Travis&lt;/li&gt;
  &lt;li&gt;I control deployments via &lt;code class=&quot;highlighter-rouge&quot;&gt;CHANGELOG.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Github releases and tags are automatically created&lt;/li&gt;
  &lt;li&gt;Javadoc is automatically created&lt;/li&gt;
  &lt;li&gt;on release, artifacts are signed and pushed to Maven Central&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you have feedback? Make sure to follow me &lt;a href=&quot;https://twitter.com/bitbrain_&quot;&gt;@bitbrain_&lt;/a&gt; on &lt;strong&gt;Twitter&lt;/strong&gt; and &lt;a href=&quot;https://github.com/bitbrain&quot;&gt;@bitbrain&lt;/a&gt; on &lt;strong&gt;Github&lt;/strong&gt;.&lt;/p&gt;</content><author><name>maruthink</name></author><category term="deployment" /><category term="travisci" /><category term="git" /><summary type="html">Some years ago I started working on a project called braingdx. It is a gamejam framework based on libgdx, fully written in Java. At some point I decided to make the artifact available for a broader audience. As a result I required a deployment flow to automatically upload the .jar files to an artifactory of my choice.</summary></entry><entry><title type="html">Level Generation in Mindmazer</title><link href="https://maruthink.github.io/2017/09/03/level-generation-in-mindmazer.html" rel="alternate" type="text/html" title="Level Generation in Mindmazer" /><published>2017-09-03T00:00:00+00:00</published><updated>2017-09-03T00:00:00+00:00</updated><id>https://maruthink.github.io/2017/09/03/level-generation-in-mindmazer</id><content type="html" xml:base="https://maruthink.github.io/2017/09/03/level-generation-in-mindmazer.html">&lt;p&gt;Today I want to talk about my project &lt;a href=&quot;https://github.com/bitbrain/mindmazer&quot;&gt;mindmazer&lt;/a&gt;. In this simple 2D puzzle game the player has to remember a certain path to progress to the next stage. When starting this project I had to decide if I give the player a static list of predefined levels. After some time I decided against it and went for a procedural generation approach. In this article I am going to explain how these levels are generated.&lt;/p&gt;

&lt;h1 id=&quot;the-level&quot;&gt;The Level&lt;/h1&gt;

&lt;p&gt;Typical ingame level look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/mindmazer-level-simple.jpg&quot; alt=&quot;mindmazer-level-simple&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You notice that the shapes are quite simple and the path is easy to remember. Therefore, as more you progress in the game as more complex the level become:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/mindmazer-level-complex.jpg&quot; alt=&quot;mindmazer-level-complex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How to generate those levels? Well, first of all I am using &lt;a href=&quot;https://libgdx.badlogicgames.com&quot;&gt;libgdx&lt;/a&gt; for &lt;a href=&quot;/2017/08/17/why-I-still-use-java-for-gamedev&quot;&gt;all my games&lt;/a&gt;. This Java library allows me to draw things on the screen and to define a framework to run my game with. Unfortunately, this library does not give me an “out-of-the-box” level generator. Thus, I had to write an algorithm myself.&lt;/p&gt;

&lt;h1 id=&quot;biom-data&quot;&gt;Biom Data&lt;/h1&gt;

&lt;p&gt;Let us first describe how a level should get defined. I did not want to have a “random” algorithm which just appends more cells into random directions. The result would be a randomly formed snake where I wouldn’t have any control over. At least I wanted &lt;strong&gt;control&lt;/strong&gt; about various level aspects. Each level is composed out of multiple parts, so called &lt;strong&gt;biomes&lt;/strong&gt;. A biom is defined Java code. Let us take a look at a typical L-Shape:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x
x
x x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This L-Shape can be represented by a &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; array:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;L_SHAPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You might notice that there is an extra entry in the array:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfColumns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;L_SHAPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;L_SHAPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Basically we are telling our level generation to always consider the last entry in a byte array as information about the number of columns in this specific biom. This is all we need as input. We now have full control over which parts should get used to compose a level.&lt;/p&gt;

&lt;h1 id=&quot;biom-conversion&quot;&gt;Biom Conversion&lt;/h1&gt;

&lt;p&gt;We need to prepare the input data (byte arrays) into a format the algorithm understands. This format is a so called &lt;code class=&quot;highlighter-rouge&quot;&gt;Biom&lt;/code&gt; class with the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;byte[][] data&lt;/code&gt; the biom as a 2-dimensional byte array (without metadata)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int startX&lt;/code&gt; the x index on the biom where the player could possibly start&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int startY&lt;/code&gt; the y index on the biom where the player could possibly start&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int endX&lt;/code&gt; the x index on the biom where the player could leave&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int endY&lt;/code&gt; the y index on the biom where the player could leave&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int length&lt;/code&gt; the number of cells inside a biom&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int width&lt;/code&gt; the width of a biom (number of cells)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int height&lt;/code&gt; the height of a biom (number of cells)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We now call a so called &lt;code class=&quot;highlighter-rouge&quot;&gt;BiomFactory&lt;/code&gt; which creates a Biom object for us:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Biom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biomFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;L_SHAPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you are interested in how this factory works internally &lt;a href=&quot;https://github.com/bitbrain/mindmazer/blob/master/core/src/de/bitbrain/mindmazer/levelgen/BiomFactory.java&quot;&gt;check out the code on Github&lt;/a&gt;.&lt;/p&gt;</content><author><name>maruthink</name></author><category term="gamedev" /><category term="mindmazer" /><category term="devlog" /><summary type="html">Today I want to talk about my project mindmazer. In this simple 2D puzzle game the player has to remember a certain path to progress to the next stage. When starting this project I had to decide if I give the player a static list of predefined levels. After some time I decided against it and went for a procedural generation approach. In this article I am going to explain how these levels are generated.</summary></entry><entry><title type="html">Why I still use Java for gamedev</title><link href="https://maruthink.github.io/2017/08/17/why-I-still-use-java-for-gamedev.html" rel="alternate" type="text/html" title="Why I still use Java for gamedev" /><published>2017-08-17T00:00:00+00:00</published><updated>2017-08-17T00:00:00+00:00</updated><id>https://maruthink.github.io/2017/08/17/why-I-still-use-java-for-gamedev</id><content type="html" xml:base="https://maruthink.github.io/2017/08/17/why-I-still-use-java-for-gamedev.html">&lt;p&gt;There is an technology, running on billions of devices every single day: Java.
Many developers (beardy hipsters) claim this technology belongs to the past, game engines like &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt; and &lt;a href=&quot;https://www.unrealengine.com/en-US/what-is-unreal-engine-4&quot;&gt;Unreal Engine&lt;/a&gt; are the future! Still, there is one man who hasn’t lost hope. Every single day he is building real games, not written in C# or Javascript. Not even Python or scientific C++. He is just using &lt;a href=&quot;https://www.java.com/en/&quot;&gt;Java&lt;/a&gt;. And this person is me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/unreal-engine-room.jpg&quot; alt=&quot;unreal-engine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This picture isn’t showing my living room. This is Unreal Engine. Playable in VR. With 60fps at 4K resolution! Awesome, right?&lt;/p&gt;

&lt;h2 id=&quot;the-simple-alternative&quot;&gt;The simple alternative&lt;/h2&gt;

&lt;p&gt;Unfortunately I didn’t create this. But hey, I can show you something amazing I did back then, in Java:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/example-game.jpg&quot; alt=&quot;example-game&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, I get you. Why am I doing this to myself? Why not just using a game engine like everyone else? It would have so many advantages to use any game engine of my choice compared to this ancient crap I am doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;complete 2D/3D editors for modeling&lt;/li&gt;
  &lt;li&gt;inbuilt physics, lighting and rainbow machine 🌈&lt;/li&gt;
  &lt;li&gt;amazing graphics, shader editors&lt;/li&gt;
  &lt;li&gt;almost no programming skillz required! Just drag and drop all your stuff!&lt;/li&gt;
  &lt;li&gt;and much more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, the answer is quite simple: I like to remind myself everyday where I started. My first game was written in &lt;a href=&quot;https://en.wikipedia.org/wiki/Delphi_(programming_language)&quot;&gt;Delphi Pascal&lt;/a&gt;. Back then I even didn’t know much about &lt;a href=&quot;http://searchmicroservices.techtarget.com/definition/object-oriented-programming-OOP&quot;&gt;OOP&lt;/a&gt; or &lt;a href=&quot;https://sourcemaking.com/design_patterns&quot;&gt;Design Patterns&lt;/a&gt;. The only thing I cared about was moving pixels on the screen. It was truly inspiring and it didn’t change, even eight years later.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-gamedev&quot;&gt;Getting started with gamedev&lt;/h2&gt;

&lt;p&gt;Many games have been completed by now and the majority of those games is written in “pure” Java. Not exactly pure Java, I am using libraries to access &lt;a href=&quot;https://www.opengl.org/&quot;&gt;OpenGL&lt;/a&gt; but generally I can say that most games are 100% written by hand, without an actual game engine or predefined templating.&lt;/p&gt;

&lt;p&gt;How do I do this? To make a game in Java you basically need three things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Java skills&lt;/li&gt;
  &lt;li&gt;Basic understanding of math (ideally vectors, functions and matrices)&lt;/li&gt;
  &lt;li&gt;Know how to set/move pixels on the screen and how to handle input&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Point 1 and 2 are straight-forward: if you know basically how Java works you can write programms which do stuff for you:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You didn't greet me! WOW!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In addition you need to know math. For example you could write an immutable &lt;a href=&quot;http://www.bbc.co.uk/education/guides/zxd26sg/revision&quot;&gt;vector&lt;/a&gt; in Java with basic addition and subtraction functionality:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can do that with many different concepts and in the end you have a small library to implement math into your game. For example, turning around a player or calculating the distance between two game objects can be simply done by using vectors.&lt;/p&gt;

&lt;h2 id=&quot;giving-birth-to-your-game&quot;&gt;Giving birth to your game&lt;/h2&gt;

&lt;p&gt;What about moving pixels on the screen? Java already has libraries like &lt;a href=&quot;https://en.wikipedia.org/wiki/Swing_(Java)&quot;&gt;Swing&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaFX&quot;&gt;JavaFX&lt;/a&gt; and I could have easily used that to write games. It seems crazy to go down the Java path for game development but I am not completely stupid. All gamers have powerful graphics cards and it would be absolutely mental not to use them. These GUI libraries rely on Software Rendering by default, which means the CPU does all the work. So we need a better solution if we want to make a highly performing 3D shooter or the next WoW.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Miguel, why not using an Engine then?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beeep, wrong question! Why bothering with a complex game engine when you can just include a small library which provides all those features for you?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;complete 2D/3D editors for modeling&lt;/li&gt;
  &lt;li&gt;inbuilt physics, lighting and rainbow machine 🌈&lt;/li&gt;
  &lt;li&gt;amazing graphics, shaders&lt;/li&gt;
  &lt;li&gt;and much more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds familiar? I’ll present to you &lt;a href=&quot;https://libgdx.badlogicgames.com/&quot;&gt;libgdx&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/media/libgdx-icon.png&quot; alt=&quot;libgdx-icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes, this library let me do all this fancy game engine stuff, but in Java! Everything rendered on my &lt;strong&gt;GTX 93849 Extreme Ultra HD Power 5000&lt;/strong&gt; Graphics Card (without FPS limit an initial empty game gets ~15000fps, whoops). Nowadays I takes me 30 minutes to create a simple 3D Snake game in Java. In under 200 lines of code. Without touching any game engine. You’re not believing me? Then you have to wait for a next blog article.&lt;/p&gt;

&lt;h2 id=&quot;why-libgdx&quot;&gt;Why libgdx?&lt;/h2&gt;

&lt;p&gt;This library allows me to combine it with my Java knowledge to write games the same way as you would write a small Swing application. Furthermore it is cross-plattform compatible, so the Java game runs &lt;a href=&quot;http://libgdx.badlogicgames.com/features.html&quot;&gt;on Windows, MacOS, Linux, Android and even iOS&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Moreover I really love Java. During the past years I worked with several programming languages, frameworks and libraries, however Java always was the easiest and simplest to work with. For example, C# is great as well. It even has features like &lt;a href=&quot;https://msdn.microsoft.com/en-gb/library/aa288459(v=vs.71).aspx&quot;&gt;Delegates&lt;/a&gt; and &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/x9fsa0sw(v=vs.100).aspx&quot;&gt;Properties&lt;/a&gt; which I really miss in Java. Also C++ is great to work with. Compile natively and have very low overhead, compared to Java. A simple SDL game written in C++ (proc-gen, without assets) can be around ~40kb, while the same game in Java is easily 8MB in size (all required .jar libraries need to get packed in the fat-jar). That’s an increase of 2000%. Still, we’re living in 2017 and file size doesn’t matter anymore (mostly). In terms of resource management &lt;a href=&quot;https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=java&amp;amp;lang2=gpp&quot;&gt;Java doesn’t do that well compared to C++&lt;/a&gt; but as I said, our computers are monster machines, we just don’t care anymore.&lt;/p&gt;

&lt;h2 id=&quot;conservative-and-old-fashioned&quot;&gt;Conservative and old-fashioned?&lt;/h2&gt;

&lt;p&gt;Do I enjoy Java too much? Probably yes. Could I save lot of time when writing larger games by using an actual game engine? Maybe. Do I want to learn various game engines by heart? Definitely. I am not saying that I blindly refuse to do something different than Java. Regardless, it’s the most fun way to do what I love.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do what you want independent of technology, library or game engine. It does’t matter how you do it. It doesn’t matter how long it takes to get there. The only thing which matters is that you are doing what you love.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;- Miguel&lt;/p&gt;</content><author><name>maruthink</name></author><category term="gamedev" /><summary type="html">There is an technology, running on billions of devices every single day: Java. Many developers (beardy hipsters) claim this technology belongs to the past, game engines like Unity and Unreal Engine are the future! Still, there is one man who hasn’t lost hope. Every single day he is building real games, not written in C# or Javascript. Not even Python or scientific C++. He is just using Java. And this person is me.</summary></entry><entry><title type="html">Terminal Setup on MacOS</title><link href="https://maruthink.github.io/2017/08/16/terminal-setup-on-macos.html" rel="alternate" type="text/html" title="Terminal Setup on MacOS" /><published>2017-08-16T00:00:00+00:00</published><updated>2017-08-16T00:00:00+00:00</updated><id>https://maruthink.github.io/2017/08/16/terminal-setup-on-macos</id><content type="html" xml:base="https://maruthink.github.io/2017/08/16/terminal-setup-on-macos.html">&lt;p&gt;&lt;img src=&quot;/public/media/macos-terminal-example.png&quot; alt=&quot;terminal-example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today I would like to share with you my current terminal setup. It basically consists of the following parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iterm2.com&quot;&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zsh.org&quot;&gt;zsh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ohmyz.sh&quot;&gt;oh-my-zsh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/2618447/6316762/51f34624-ba00-11e4-948a-6ac65a49f8c5.png&quot;&gt;sorin zsh theme&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/deepsweet/Monokai-Soda-iTerm&quot;&gt;Monokai Soda&lt;/a&gt; (modified)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-terminal&quot;&gt;The Terminal&lt;/h2&gt;

&lt;p&gt;The default terminal app on MacOS is definitely lacking of functionality. As &lt;a href=&quot;https://medium.com/@xanderdunn&quot;&gt;xanderdunn&lt;/a&gt; has &lt;a href=&quot;https://medium.com/@xanderdunn/iterm2-vs-terminal-c06976f106ef&quot;&gt;written on Medium&lt;/a&gt;, iTerm2 has huge advantages compared to the default terminal:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s a lot more customizable. For example, I can tell it to shut up and never show me warning dialogues when I’m closing a tab or quitting the app when there’s a running process. Customizability ends up being pretty important for serious developers who are always in the terminal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apart from customisation, iTerm2 allows me to split tabs vertically or horizontally on a native basis (different from &lt;a href=&quot;https://gist.github.com/simme/1297707&quot;&gt;tmux&lt;/a&gt; where it is virtually implemented). With tmux we could achieve similar behavior, however it would take much longer to set it up and even then it would still not be natively implemented. As a Mac user I always strived for fast and easy setup. When I change my machine I do not want to spend weeks on customising my Terminal. iTerm2 has lots of inbuilt features which could only be added to the default terminal by using plugins.&lt;/p&gt;

&lt;h2 id=&quot;the-shell&quot;&gt;The Shell&lt;/h2&gt;

&lt;p&gt;I used many shells such as &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish&lt;/a&gt; or &lt;a href=&quot;https://gist.github.com/MohamedAlaa/2961058&quot;&gt;tmux&lt;/a&gt;. After all this time I eventually sticked to zsh for different reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ohmyz.sh/community&quot;&gt;amazing community&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;lots of customizations&lt;/li&gt;
  &lt;li&gt;syntax highlighting&lt;/li&gt;
  &lt;li&gt;lots of available plugins&lt;/li&gt;
  &lt;li&gt;inline auto-suggestions&lt;/li&gt;
  &lt;li&gt;paginated completion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To just list some of the great features.&lt;/p&gt;

&lt;h2 id=&quot;the-theme&quot;&gt;The Theme&lt;/h2&gt;

&lt;p&gt;When I started programming I never thought about customising my terminal or favourite IDE. After many years of trying different things I started to like dark themes. It’s 2017 and there are thousands of different themes out there. My favourite is still &lt;a href=&quot;https://atom.io/themes/monokai&quot;&gt;Monokai&lt;/a&gt;, presumably known from the &lt;a href=&quot;https://josephg.com/blog/electron-is-flash-for-the-desktop&quot;&gt;legendary RAM eating machine&lt;/a&gt;, called &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt;. Monokai has vibrant colours which help me to see things, even at night. It’s just preference but I really love vibrant colours (and Tron).&lt;/p&gt;

&lt;p&gt;I use two different things for the appearance: the &lt;a href=&quot;https://github.com/deepsweet/Monokai-Soda-iTerm&quot;&gt;Monokai Soda&lt;/a&gt; theme for colours and the &lt;a href=&quot;https://cloud.githubusercontent.com/assets/2618447/6316762/51f34624-ba00-11e4-948a-6ac65a49f8c5.png&quot;&gt;sorin zsh theme&lt;/a&gt; theme for the terminal layout. Note that I made the colours of the Soda theme slightly brighter to have an increase in contrast.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you like my setup. Happy coding!&lt;/p&gt;</content><author><name>maruthink</name></author><category term="misc" /><category term="showcase" /><category term="howto" /><summary type="html"></summary></entry><entry><title type="html">New blog</title><link href="https://maruthink.github.io/2017/08/15/new-blog.html" rel="alternate" type="text/html" title="New blog" /><published>2017-08-15T00:00:00+00:00</published><updated>2017-08-15T00:00:00+00:00</updated><id>https://maruthink.github.io/2017/08/15/new-blog</id><content type="html" xml:base="https://maruthink.github.io/2017/08/15/new-blog.html">&lt;p&gt;Laziness can be a disease. Unfortunately my brain decided to just stop writing blog articles about stuff I do. This does not mean that I ever stopped. Oh hell no, I even did too much since I last blogged about my life. Things changed drastically in the last 12 months: moving to Central London to work fulltime, having two cats as well as enjoying life more than ever.&lt;/p&gt;

&lt;p&gt;But let’s not talk about boring stuff for now, what can you guys expect on here?&lt;/p&gt;

&lt;p&gt;Let’s sum up some things I want to talk about in the next weeks and months:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java/Javascript/Groovy/’insert your favourite language here’ tips and tricks!&lt;/li&gt;
  &lt;li&gt;Working with &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt; and CIs like Jenkins, TravisCI or Bamboo&lt;/li&gt;
  &lt;li&gt;Motivation, Work/Life Balance&lt;/li&gt;
  &lt;li&gt;gamedev!!!111 and pixelart&lt;/li&gt;
  &lt;li&gt;Gaming and Twitter drama&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds interesting? Let’s see what the future holds. See you!&lt;/p&gt;</content><author><name>maruthink</name></author><category term="introduction" /><summary type="html">Laziness can be a disease. Unfortunately my brain decided to just stop writing blog articles about stuff I do. This does not mean that I ever stopped. Oh hell no, I even did too much since I last blogged about my life. Things changed drastically in the last 12 months: moving to Central London to work fulltime, having two cats as well as enjoying life more than ever.</summary></entry></feed>